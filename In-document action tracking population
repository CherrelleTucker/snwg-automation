// Purpose: Create custom action item menu for easy population. Search document for phrase "Action:" and populate action tracking table with relevant information. 
// Restrictions: To be used as a script opened from within a container document, not as a standalone.
// Done: Search the second column of the first table in a Google doc for the phrase "Action:" and pull the paragraph that follows
// Done: Identify the second table in the document. Place the found name in the 2nd column, the paragraph following the "Action:" phrase in the 4th column.
// Done: Create an Action: Tracking table only if one does not exist. The first column is "Status". The 2nd is "Owner". The 3rd is "Project". The 4th is "Action:"
// Done: Search "Attendees" list for names that may be identified after the "Action" key word, instead of a static list.  Account for the use of First, Last in Attendees list, but only either First or Last in the text.
// Done: Create custom menu with action tracking population button
// Future Development: assign first level project name to the appropriate action. 

//Create Custom Get Action menu on document open
function onOpen() {
  DocumentApp.getUi() // 
      .createMenu('Action Items')
      .addItem('Get Actions','createTableIfNotExist')
      .addToUi();
}


function createTableIfNotExist() {
  const doc = DocumentApp.getActiveDocument();  // Correct function call
  const body = doc.getBody();
   
   // Extract attendees from the text above the first table
   const names = extractAttendees(body);
   const firstTable = body.getTables()[0];
   const actionList = [];
 
   // Iterate over the rows in the first table
   for(let i = 0; i < firstTable.getNumRows(); i++) {
     const cell = firstTable.getCell(i, 1); // second column
     const lines = cell.getText().split('\n'); // split cell content into lines
     const attributes = cell.getAttributes(); // get the text attributes in cell
 
     lines.forEach((line, index) => {
       const actionKeyword = "Action:";
       const startIndex = line.indexOf(actionKeyword);
 
       if (startIndex !== -1) {
         const sentence = line.substring(startIndex + actionKeyword.length);
         const words = sentence.split(" ");
 
         const foundName = names.find(name => words.join(' ').includes(name)); // change here
         if(foundName) {
           const nameIndex = words.indexOf(foundName.split(' ')[0]); // change here
           const action = words.slice(nameIndex + foundName.split(' ').length).join(' '); // get remaining words as action
 
           let project = '';
           for(let j=index-1; j>=0; j--){
             // check if the line is underlined
             if(attributes[j] && attributes[j]['UNDERLINE'] === true){
               project = lines[j]; // this is the project name
               break;
             }
           }
 
           actionList.push({name: foundName, action, project});
         }
       }
     });
   }
 
   // Get or create the second table
   const secondTable = secondTableExists(body) ? body.getTables()[1] : createSecondTable(body);
 
   // Get the first empty row in the second table
   let firstEmptyRow = 0;
   for(let i = 0; i < secondTable.getNumRows(); i++) {
     if(secondTable.getCell(i, 0).getText().trim() === '') {
       firstEmptyRow = i;
       break;
     }
   }
 
   // Add the actions to the second table
   for(const actionItem of actionList) {
     let row;
     if(firstEmptyRow < secondTable.getNumRows()) {
       row = secondTable.getRow(firstEmptyRow++);
     } else {
       row = secondTable.appendTableRow();
     }
     
     if(row.getNumCells() < 4) {
       while(row.getNumCells() < 4) {
         row.appendTableCell();
       }
     }
 
     row.getCell(1).setText(actionItem.name); // owner
     row.getCell(2).setText(actionItem.project); // project
     row.getCell(3).setText(actionItem.action); // action
   }
 }
 
 function secondTableExists(body) {
   return body.getTables().length > 1;
 }
 
 function createSecondTable(body) {
   const table = body.appendTable();
   const header = table.appendTableRow();
   header.appendTableCell("Status");
   header.appendTableCell("Owner");
   header.appendTableCell("Project");
   header.appendTableCell("Action");
   return table;
 }
 
 function extractAttendees(body) {
   let attendees = [];
   
   const paragraphs = body.getParagraphs();
   for (let i = 0; i < paragraphs.length; i++) {
     if (paragraphs[i].getText().startsWith('Attendees:')) {
       const attendeeText = paragraphs[i].getText().replace('Attendees:', '').trim();
       const attendeeNames = attendeeText.split(',');
       attendeeNames.forEach(name => attendees.push(name.trim().split(' ')[0]));
       break;
     }
   }
 
   return attendees;
 }
 
 createTableIfNotExist();
 