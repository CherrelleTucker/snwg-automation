// Purpose: Create custom menu. "Get Actions" "Organize Attendees"
// Done: Sort attendees alphabetically by first name
// Done: Search document for phrase "Action:" and populate action tracking table with relevant information. 
// Done: Search the second column of the first table in a Google doc for the phrase "Action:" and pull the paragraph that follows
// Done: Identify the second table in the document. Place the found name in the 2nd column, the paragraph following the "Action:" phrase in the 3rd column.
// Done: Create an Action: Tracking table only if one does not exist. The first column is "Status". The 2nd is "Owner". The 3rd is "Action:"
// Done: Search "Attendees" list for names that may be identified after the "Action" key word, instead of a static list.  Account for the use of First, Last in Attendees list, but only either First or Last in the text.
// Done: Create custom menu with action tracking population button


function onOpen() {
  DocumentApp.getUi() // 
      .createMenu('Custom Items')
      .addItem('Populate Actions','createTableIfNotExist')
      .addItem ('Organize Attendees','sortAttendees')
      .addToUi();
}


function createTableIfNotExist() {
  const doc = DocumentApp.getActiveDocument();
  const body = doc.getBody();

  // Extract attendees from the text above the first table
  const names = extractAttendees(body);
  const firstTable = body.getTables()[0];
  const actionList = [];

  // Iterate over the rows in the first table
  for (let i = 0; i < firstTable.getNumRows(); i++) {
    const cell = firstTable.getCell(i, 1);
    const lines = cell.getText().split('\n');
    const attributes = cell.getAttributes();

    lines.forEach((line, index) => {
      const actionKeyword = "Action:";
      const startIndex = line.indexOf(actionKeyword);

      if (startIndex !== -1) {
        const sentence = line.substring(startIndex + actionKeyword.length);
        const words = sentence.split(" ");

        const foundName = names.find(name => words.join(' ').includes(name));
        if (foundName) {
          const nameIndex = words.indexOf(foundName.split(' ')[0]);
          const action = words.slice(nameIndex + foundName.split(' ').length).join(' ');

          // Check if the same name and action combination already exists in the second table
          const isDuplicate = actionList.some(item => item.name === foundName && item.action === action);
          if (!isDuplicate) {
            actionList.push({ name: foundName, action });
          }
        }
      }
    });
  }

   // Get or create the second table
   const secondTable = secondTableExists(body) ? body.getTables()[1] : createSecondTable(body);
 
   // Get the first empty row in the second table
   let firstEmptyRow = 0;
   for(let i = 0; i < secondTable.getNumRows(); i++) {
     if(secondTable.getCell(i, 0).getText().trim() === '') {
       firstEmptyRow = i;
       break;
     }
   }
 
   // Add the actions to the second table
   for(const actionItem of actionList) {
     let row;
     if(firstEmptyRow < secondTable.getNumRows()) {
       row = secondTable.getRow(firstEmptyRow++);
     } else {
       row = secondTable.appendTableRow();
     }
     
     if(row.getNumCells() < 3) {
       while(row.getNumCells() < 3) {
         row.appendTableCell();
       }
     }
 
     row.getCell(1).setText(actionItem.name); // owner
     row.getCell(2).setText(actionItem.action); // action
   }
 }
 
 function secondTableExists(body) {
   return body.getTables().length > 1;
 }
 
 function createSecondTable(body) {
   const table = body.appendTable();
   const header = table.appendTableRow();
   header.appendTableCell("Status");
   header.appendTableCell("Owner");
   header.appendTableCell("Action");
   return table;
 }
 
 function extractAttendees(body) {
   let attendees = [];
   
   const paragraphs = body.getParagraphs();
   for (let i = 0; i < paragraphs.length; i++) {
     if (paragraphs[i].getText().startsWith('Attendees:')) {
       const attendeeText = paragraphs[i].getText().replace('Attendees:', '').trim();
       const attendeeNames = attendeeText.split(',');
       attendeeNames.forEach(name => attendees.push(name.trim().split(' ')[0]));
       break;
     }
   }
 
   return attendees;
 }
 
 createTableIfNotExist();
 
function sortAttendees() {
   const doc = DocumentApp.getActiveDocument();  // Open Active Document
   const body = doc.getBody();
  var text = body.getText(); // Get the text from the document

  // Extract attendees. The script assumes that the attendee list is on its own line
  // and there are no other lines with similar formatting.
  var attendeesRegex = /^Attendees: (.*)$/m;
  var attendeesMatch = text.match(attendeesRegex);

  if (attendeesMatch) {
    var attendees = attendeesMatch[1].split(", ");
    attendees.sort();

    var sortedAttendees = attendees.join(", ");

    // Replace the original attendees list with the sorted one
    body.replaceText(attendeesMatch[0], "Attendees: " + sortedAttendees);
  } else {
    console.log("No Attendees found");
  }
}

sortAttendees(); // Call the function

 