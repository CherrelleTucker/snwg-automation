import os
import re
import datetime
from dotenv import load_dotenv
from slack_bolt import App
from slack_bolt.adapter.socket_mode import SocketModeHandler

# Local imports
from handlers.acronym_handler import AcronymHandler
from fact import get_fact
from room import Room

load_dotenv()

BOT_TOKEN = os.getenv("xoxb-129287844646-5571131867456-gUqUAIqAhsemYiwJqWvHPyhr")
APP_TOKEN = os.getenv("APP_TOKEN")

app = App(token=BOT_TOKEN)

@app.message(re.compile("(hello|hi)", re.I))
def say_hello_regex(context, say):
    """Greets the user back when user says 'hello' or 'hi'."""
    greeting = context["matches"][0]
    say(f"{greeting}, <@{context['user_id']}>, how are you?")

@app.message("fact|another")
def message_fact(message, say):
    """Replies with a random fact when user requests for a fact."""
    user_id = message["user"]
    fact = get_fact(user_id)
    say(fact)

@app.message("time|date")
def message_time(message, say):
    """Replies with the current date and time when user asks for time."""
    current_time = datetime.datetime.now()
    # Convert to human readable format
    formatted_time = current_time.strftime("%d/%m/%Y %H:%M:%S")
    say(f"The date and time is: {formatted_time}")

room1 = Room()
@app.message("room|available")
def message_room_available(message, say):
    """Displays all available rooms."""
    available_rooms = room1.show_room_availability_time()
    for room_, time in available_rooms:
        say(f"The room {room_} is available at {time}\n")

@app.message("Book|book")
def message_room_book(message, say):
    """Books a room when user says 'Book <room> <time>'."""
    text = message['text']
    split_text = text.split()

    if len(split_text) < 3:
        say("Invalid command. Please provide a room and time. For example: `Book Lovelace [9, 10]`.")
        return

    room_name = split_text[1]
    time_list = split_text[2].strip('[]').split(',')

    if not time_list or not room_name:
        say("Invalid command. Please provide a room and time. For example: `Book Lovelace [9, 10]`.")
        return

    time = [int(t.strip()) for t in time_list]
    room1.book_room(room_name, time)
    say(f"Room {room_name} has been booked for {', '.join(map(str, time))}.")

if __name__ == "__main__":
    SocketModeHandler(app, APP_TOKEN).start()
