// Purpose: The script automates the creation and updating of a presentation slide for business purposes. It computes various date-related values, including fiscal year, quarter, and sprint, considering any adjustment weeks. The script handles specific elements on the slide, such as populating a table with open action items from a Google Sheet, listing agenda files for the current and last weeks, and updating text placeholders for date ranges and other fiscal details. Additionally, it finds a specific DMPR file based on the current month and year and updates a shape's text and hyperlink within the slide. The generated slide is then inserted into the target presentation, providing an efficient way to manage regular updates.

// Future development: use file name instead of hyperlink text
//  Consideration: limitations of Google Slides Object handling does not promote the hyperlinking of individual text strings within objects. 

// To note: 
// This script is developed as a Google Apps Script container script: i.e. a script that is bound to a specific file, such as a Google Sheets, Google Docs, or Google Forms file. This container script acts as the file's custom script, allowing users to extend the functionality of the file by adding custom functions, triggers, and menu items to enhance its behavior and automation.

/////////////////////////////////

// Global variables
var quadTemplateId = '1iWm9oAJ-hFR_BJ-pEFGndhfFCLhWIigxJBvZM5xlf2M'; // SNWG MO Weekly Quad Chart Slide Template
var targetPresentationId = '1wV26VGjZJ_P7hsnxdkub6PltQ3ZkedYb8yDviEYE4aE'; // SNWG MO Weekly Quad Chart presentation
var DMPRfolderID = '1y2vjwf52HBJpTeSIg7sYPaLSSzGAnWZU'; // IMPACT/SNWG DMPR folder
var agendasFolderID = '13zl2CvMNtDMFKcNZetAA00e5tkh3Eo_M'; // SNWG Meeting Notes folder 
var sheetID = '1uYgX660tpizNbIy44ddQogrRphfwZqn1D0Oa2RlSYKg' // SNWG MO Action Tracking Sheet 

// helper function to create custom menu for manually updating slides
function onOpen() {
  SlidesApp.getUi()
      .createMenu('Update Slides')
      .addItem('Create a New Slide','updatePresentationOptimized')
      .addToUi();
}

// immediately invoked function expression - adjustedPIcalculator to calculate current PI  ****DO NOT TOUCH****
var adjustedPIcalculator = (function(){
  // Adjustment Weeks to account for holidays, vacations, etc. Add the first Sunday of the Adjustment Week at the bottom of the list in 'YYYY-MM-DD' format. 
  var ADJUSTMENT_WEEKS = []; // Add adjustment week dates here.
  ADJUSTMENT_WEEKS.push(new Date('2023-07-02')); // Innovation Week #2
  ADJUSTMENT_WEEKS.push(new Date('2023-07-16')); // IGARSS 2023
  // Add dates as 'yyyy-mm-dd'

  ///////////////////////////////////////

  // Global variables
  var BASE_DATE = new Date('2023-04-16');  // The date for '23.3.1 Week 1', the beginning sprint of record for the purposes of this script. 
  var BASE_FY = 23;
  var BASE_PI = 3;
  var BASE_SPRINT = 1;
  var BASE_WEEK = 1;

  // Helper function to convert a date to the number of milliseconds since Jan 1, 1970
  function toMillis(date) {
    return Date.UTC(date.getFullYear(), date.getMonth(), date.getDate());
  }

  // Helper function to calculate Adjustment Weeks
  function adjustmentWeeks(date) {
    var adjustmentWeeks = 0;
    var currentTime = toMillis(date);
    for(var i = 0; i < ADJUSTMENT_WEEKS.length; i++) {
      if(toMillis(ADJUSTMENT_WEEKS[i]) <= currentTime) {
        adjustmentWeeks++;
      }
    }
    return adjustmentWeeks;
  }

  // Helper function to calculate the current fiscal year
  function getFiscalYear(date) {
    var year = date.getFullYear();
    var month = date.getMonth();
    
    // The fiscal year starts in October (month index 9)
    return month >= 9 ? year + 1 : year;
  }

  // Helper function to get current PI (Q) (1-4)
  function getQuarter(date) {
    // In JavaScript, months are 0-indexed, so October is 9 and September is 8
    var month = date.getMonth();
    
    // The first quarter of the fiscal year starts in October
    if (month >= 9) {
      return ((month - 9) / 3 | 0) + 1;
    } else {
      return ((month + 3) / 3 | 0) + 1;
    }
  }

  // Helper function to get current Sprint (1-6)
  function getSprint(date) {
    var fiscalYearStart = new Date(getFiscalYear(date), 9, 1);
    var diffWeeks = Math.ceil(((date - fiscalYearStart + 1) / (24 * 60 * 60 * 1000)) / 7);
    
    // Subtract adjustment weeks
    diffWeeks -= adjustmentWeeks(date);
    
    // Subtract the base week of the quarter
    var baseWeek = (getQuarter(date) - 1) * 13;
    diffWeeks -= baseWeek;
    
    // Calculate the sprint based on the week of the fiscal year, after accounting for adjustment weeks
    var sprint = Math.ceil(diffWeeks / 2);
    
    return sprint;
  }

  // Helper function to get current week (1-2)
  function getWeek(date) {
    return Math.ceil(((date - new Date(getFiscalYear(date), 9, 1) + 1) / (24 * 60 * 60 * 1000)) / 7) % 2 === 0 ? 2 : 1;
  }

  // Helper function to get week of the year
  function getWeekOfYear(date) {
    var start = new Date(date.getFullYear(), 0, 1);
    var diff = date - start + (start.getTimezoneOffset() - date.getTimezoneOffset()) * 60 * 1000;
    var oneDay = 1000 * 60 * 60 * 24;
    var day = Math.floor(diff / oneDay);
    return Math.ceil(day / 7);
  }

  // Helper function to rename FY.Q.6.1 to "Innovation Week"
  function renameInnovation(pi) {
    return pi.endsWith(".6.1") ? "Innovation Week" : pi;
  }

  // Helper function to rename FY.Q.6.2 to "Next PI Planning"
  function renameNextPiPlanning(pi) {
    return pi.endsWith(".6.2") ? "Next PI Planning" : pi;
  }

  // Helper function to calculate the Adjusted PI
  function getPI(inputDate) {
    if (!(inputDate instanceof Date)) {
      // Attempt to parse the inputDate as a string and convert it to a Date object
      inputDate = new Date(inputDate);

      // Check if the parsed inputDate is valid
      if (isNaN(inputDate.getTime())) {
        throw new Error("Invalid date provided to getPI function.");
      }
    }

    var daysPassed = (toMillis(inputDate) - toMillis(BASE_DATE)) / (24 * 60 * 60 * 1000) - adjustmentWeeks(inputDate) * 7;
    var weeksPassed = Math.floor(daysPassed / 7);
    
    // calculate the total two week periods passed since the BASE_DATE
    var totalTwoWeekPeriods = Math.floor(weeksPassed / 2);
    
    var week = weeksPassed % 2 + 1;
    var sprint = totalTwoWeekPeriods % 6 + 1;
    var pi = Math.floor(totalTwoWeekPeriods / 6) % 4 + BASE_PI;
    var fy = BASE_FY + Math.floor(totalTwoWeekPeriods / (6 * 4));
    var piStr = "FY" + fy + "." + pi + "." + sprint + " Week " + week;  // Format result as FY.Q.S Week W
    piStr = renameInnovation(piStr);
    piStr = renameNextPiPlanning(piStr);

    return piStr;
  }

  // Primary function to replace placeholder text {{Adjusted PI}} with the calculated Adjusted PI
  function replacePlaceholderWithPI(document, adjustedPI) {
    var body = document.getBody();
    var text = body.editAsText();
    text.replaceText("{{Adjusted PI}}", adjustedPI);
  }

  // Make the getPI function accessible outside the IIFE
  return {
    getPI: getPI,
    replacePlaceholderWithPI: replacePlaceholderWithPI
  };
})();

// helper function to duplicate template slide with placeholders
function duplicateTemplateSlide(quadTemplateId) {
  try {
    var quadTemplateFile = DriveApp.getFileById(quadTemplateId);
    var newSlideFile = quadTemplateFile.makeCopy();
    var newSlide = SlidesApp.openById(newSlideFile.getId()).getSlides()[0];
    return newSlide;
  } catch (error) {
    Logger.log("Error duplicating template slide: " + error);
    throw error;
  }
}

// helper function to get current week Mon-Fri dates for header
function getCurrentWeekDates() {
  try {
    var today = new Date();
    var startOfWeek = new Date(today.setDate(today.getDate() - today.getDay() + 1));
    var endOfWeek = new Date(today.setDate(today.getDate() - today.getDay() + 5));
    return {
      start: startOfWeek,
      end: endOfWeek,
      formatted: Utilities.formatDate(startOfWeek, 'GMT', 'MM/dd/yy') + " - " + Utilities.formatDate(endOfWeek, 'GMT', 'MM/dd/yy')
    };
  } catch (error) {
    Logger.log("Error getting current week dates: " + error);
    throw error;
  }
}

// helper function to convert dates
function reformatWeekDates(weekDates) {
  var dates = weekDates.formatted.split(' - ');
  return {
    start: new Date(dates[0]),
    end: new Date(dates[1])
  };
}

// Helper function to extract date from filename
function extractDateFromFileName(fileName) {
  var datePattern = /^\d{4}-\d{2}-\d{2}/; // Regex pattern for YYYY-MM-DD
  var match = fileName.match(datePattern);

  if (match) {
    return new Date(match[0] + 'T00:00:00.000Z'); // Append time string
  } else {
    return null; // Return null if no date pattern is found
  }
}

// helper function to find current week files
function getFilesForCurrentWeek(folderID, currentWeekDates) {
  var filesWithLinks = [];
  var foldersToProcess = [folderID];

  // Additional code to get files from a specific folder
  var specificFolderID = "1M3EMWLCxhkqcPKLmH7grDu2zhSEuOvmc"; // Replace with the specific folder ID
  var specificFilesWithLinks = getFilesForCurrentWeekFromSpecificFolder(specificFolderID, currentWeekDates);
  filesWithLinks = filesWithLinks.concat(specificFilesWithLinks);

  // Subtract one day from the start date
  var adjustedStartDate = new Date(currentWeekDates.start);
  adjustedStartDate.setDate(adjustedStartDate.getDate() - 1);

  // Add one day to the end date
  var adjustedEndDate = new Date(currentWeekDates.end);
  adjustedEndDate.setDate(adjustedEndDate.getDate() + 1);

  while (foldersToProcess.length > 0) {
    var currentFolderID = foldersToProcess.pop();
    var folder = DriveApp.getFolderById(currentFolderID);
    var folderName = folder.getName(); // Get the name of the current folder


    var files = folder.getFiles();

    while (files.hasNext()) {
      var file = files.next();
      var fileName = file.getName();
      var fileDate = extractDateFromFileName(fileName);

      // Check if the file name starts with 2023 or 2024
      if (fileName.startsWith("2023") || fileName.startsWith("2024")) {
        var fileDate = extractDateFromFileName(fileName);

      if (fileDate && fileDate >= adjustedStartDate && fileDate <= adjustedEndDate) {
        filesWithLinks.push({
          name: fileName,
          url: file.getUrl()
        });
      }
    } // else skip this file
  }

    var subfolders = folder.getFolders();
    while (subfolders.hasNext()) {
      var subfolder = subfolders.next();
      var subfolderName = subfolder.getName();

      // Exclude subfolders with specific names
      if (subfolderName !== "2020" && subfolderName !== "2021" && subfolderName !== "FY21" && subfolderName !== "2022" && subfolderName !== "FY22" && subfolderName !== "Archived Notes") {
        foldersToProcess.push(subfolder.getId());
      }
    }
  }

  return filesWithLinks;
}

// sub-helper function to get JPL-hosted files for current week (Shared, deeply-nested folder structure)
function getFilesForCurrentWeekFromSpecificFolder(specificFolderID, currentWeekDates) {
  var filesWithLinks = [];
  var specificFolderID = '1M3EMWLCxhkqcPKLmH7grDu2zhSEuOvmc';
  var foldersToProcess = [specificFolderID]; // Start with the specific folder ID

  while (foldersToProcess.length > 0) {
    var currentFolderID = foldersToProcess.pop();
    var folder = DriveApp.getFolderById(currentFolderID);
    var folderName = folder.getName(); // Get the name of the current folder

    // Log the name and ID of the current folder being processed
    Logger.log("Processing folder: " + folderName + " (ID: " + currentFolderID + ")");

    var files = folder.getFiles();
    
    while (files.hasNext()) {
      var file = files.next();
      var fileName = file.getName();
      var fileDate = extractDateFromFileName(fileName);
      // Log the file name for debugging

      if (fileDate && fileDate >= currentWeekDates.start && fileDate <= currentWeekDates.end) {
        filesWithLinks.push({
          name: fileName,
          url: file.getUrl()
        });
      }
    }

    var subfolders = folder.getFolders();
    while (subfolders.hasNext()) {
      var subfolder = subfolders.next();
      var subfolderName = subfolder.getName();

      // Exclude subfolders with specific names
      if (subfolderName !== "2020" && subfolderName !== "2021" && subfolderName !== "FY21" && subfolderName !== "2022" && subfolderName !== "FY22" && subfolderName !== "Archived Notes") {
        foldersToProcess.push(subfolder.getId());
      } else {
      }
    }
  }

  return filesWithLinks;
}

// helper function to get dates for last week
function getLastWeekDates() {
  var currentDate = new Date();
  var startOfLastWeek = new Date(currentDate);
  startOfLastWeek.setDate(currentDate.getDate() - 7); // Go back one week to find the start
  startOfLastWeek.setDate(startOfLastWeek.getDate() - startOfLastWeek.getDay() + 1); // Align to the start of the week (Monday)

  var endOfLastWeek = new Date(startOfLastWeek);
  endOfLastWeek.setDate(startOfLastWeek.getDate() + 4); // Last week's end date (Friday)

  return {
    start: startOfLastWeek,
    end: endOfLastWeek
  };
}

// helper function to find last week files
function getFilesForLastWeek(folderID) {
  var lastWeekDates = getLastWeekDates(); // Get the start and end dates for last week
  return getFilesForCurrentWeek(folderID, lastWeekDates);
}

// helper function to replace slide placeholders
function replacePlaceholdersInSlide(slide, replacements) {
  try {
    var slideShapes = slide.getShapes();
    slideShapes.forEach(function (shape) {
      if (shape.getText) {
        var text = shape.getText().asString();
        for (var key in replacements) {
          if (text.includes(key)) {
            shape.getText().setText(text.replace(key, replacements[key]));
          }
        }
      }
    });
  } catch (error) {
    Logger.log("Error replacing placeholders in slide: " + error);
    throw error;
  }
}

// Helper function to find a shape in a slide by its alt text description
function findShapeByAltText(slide, altText) {
  var shapes = slide.getShapes();
  for (var i = 0; i < shapes.length; i++) {
    var shape = shapes[i];
    if (shape.getDescription() === altText) {
      return shape;
    }
  }
  return null;
}

// helper function to find current month's DMPR file
function findCurrentDMPRFile() {
  // Get the current year and month
  var date = new Date();
  var year = date.getFullYear();
  var month = ("0" + (date.getMonth() + 1)).slice(-2); // Convert to two digits

  // Create the search pattern for the file
  var searchPattern = year + "-" + month + "_SNWG_DMPR";

  // Get the files in the folder with the given folder ID
  var folder = DriveApp.getFolderById(DMPRfolderID);
  var files = folder.getFiles();

  // Loop through the files and look for the one with the correct name format
  while (files.hasNext()) {
    var file = files.next();
    if (file.getName().startsWith(searchPattern)) {
      return file; // Return the found file
    }
  }

  // If no matching file is found, return null
  return null;
}

//helper function to find DMPR shape
function handleCurrentDMPRShape(currentDMPRShape) {
  if (currentDMPRShape) {
    Logger.log("Current DMPR shape found.");
    var dmprFile = findCurrentDMPRFile(); // Find the DMPR file
    if (dmprFile) {
      Logger.log("DMPR file found: " + dmprFile.getName());
  var year = new Date().getFullYear();
      var month = ("0" + (new Date().getMonth() + 1)).slice(-2);
      var dmprText = year + "-" + month + " DMPR"; // Format the text
      var textRange = currentDMPRShape.getText(); // Get the text range from the shape
      textRange.setText(dmprText); // Replace the text
      Logger.log("DMPR text set: " + dmprText);

      var dmprFileUrl = dmprFile.getUrl();
      Logger.log("Adding new hyperlink to DMPR file: " + dmprFileUrl);

      currentDMPRShape.setLinkUrl(dmprFileUrl); // Set the hyperlink on the shape itself
    } else {
      Logger.log("DMPR file not found!");
    }
  } else {
    Logger.log("Current DMPR shape not found!");
  }
}

// helper function to update Open Action Items
function updateOpenActionItems() {
  // Open the Google Sheet by ID and get the sheet named 'Table Pull'
  var sheet = SpreadsheetApp.openById(sheetID).getSheetByName('Table Pull');

  if (sheet === null) {
    Logger.log('Could not find sheet with name Table Pull');
    return null;
  }

  // Define the columns
  var statusColumn = 2; // Column B
  var assignedToColumn = 3; // Column C
  var taskColumn = 4; // Column D

  // Get the values from the Sheet
  var statuses = sheet.getRange('B2:B' + sheet.getLastRow()).getValues();
  var assignedToTasks = [];
  for (var i = 0; i < statuses.length; i++) {
    if (statuses[i][0].toLowerCase() != 'done') {
      assignedToTasks.push([
        sheet.getRange(i + 2, assignedToColumn).getValue(),
        sheet.getRange(i + 2, taskColumn).getValue()
      ]);
    }
  }

  return assignedToTasks; // Return the data to be used in the primary function
}

// Primary function to create and populate new slide
function updatePresentationOptimized() {

  // Duplicate the template and get the new presentation
  var newSlide = duplicateTemplateSlide(quadTemplateId);

  // Get dates and current PI
  var currentWeekDates = getCurrentWeekDates(); // No need to reformat the dates, use the formatted version directly
  Logger.log("currentWeekDates value: " + currentWeekDates);
  Logger.log("currentWeekDates type: " + typeof currentWeekDates);

  // Call the updateOpenActionItems function and store the result
  var assignedToTasks = updateOpenActionItems();

  // Get all tables in the slide
  var tables = newSlide.getTables();

  // If there's a table, let's assume it's the "Open Action Items" table
  if (tables.length > 0) {
    var table = tables[0]; // Get the first table
    var numRows = assignedToTasks.length;
    var numColumns = assignedToTasks[0].length;

    // Ensure the table has enough rows, add if necessary
    while (table.getNumRows() < numRows) {
      table.appendRow();
    }

    // Ensure the table has enough columns, add if necessary
    while (table.getNumColumns() < numColumns) {
      table.appendColumn();
    }

    // Populate the table with assigned tasks
    for (var row = 0; row < numRows; row++) {
      for (var col = 0; col < numColumns; col++) {
        table.getCell(row, col).getText().setText(assignedToTasks[row][col]);
      }
    }
  } else {
    Logger.log("No table found on the slide.");
  } 

  // Use the currentWeekDates directly since it already contains the formatted dates and the start and end dates
  var weekDatesString = currentWeekDates.formatted;
  
  // Get files for the current week
  var currentWeekFiles = getFilesForCurrentWeek(agendasFolderID, currentWeekDates);

  // Get the "This Week Agendas" shape
  var thisWeekAgendasShape = findShapeByAltText(newSlide, "This Week Agendas");

  // Populate "This Week Agendas" shape with files for the current week
  if (thisWeekAgendasShape) {
    var thisWeekAgendasText = currentWeekFiles.map(function(file) {
      return file.url; // Format as you like
    }).join('\n');
    thisWeekAgendasShape.getText().setText(thisWeekAgendasText);
  }
    
  // Get the "Last Week Agendas" shape
  var lastWeekAgendasShape = findShapeByAltText(newSlide, "Last Week Agendas");

  // Get files for the last week
    var lastWeekFiles = getFilesForLastWeek(agendasFolderID);

    // Populate "Last Week Agendas" shape with files for the last week
    if (lastWeekAgendasShape) {
      var lastWeekAgendasText = lastWeekFiles.map(function(file) {
        return file.url; // Format as you like
      }).join('\n');
      lastWeekAgendasShape.getText().setText(lastWeekAgendasText);
    }

  var currentPI = adjustedPIcalculator.getPI(new Date());
  var year = new Date().getFullYear();
  var month = ("0" + (new Date().getMonth() + 1)).slice(-2);
  var dmprText = year + "-" + month + " DMPR";
  var currentDMPRShape = findShapeByAltText(newSlide, "DMPR Placeholder");
  handleCurrentDMPRShape(currentDMPRShape);

  updateOpenActionItems();

  // Replace placeholders with corresponding dates and PI in the new slide
  replacePlaceholdersInSlide(newSlide, {
    '{{Current Mon to Fri}}': weekDatesString, // Use the formatted date string directly
    '{{Adjusted PI}}': currentPI,
    '{{Current DMPR}}': dmprText
  });

  // Insert the new slide at the beginning
  var targetPresentation = SlidesApp.openById(targetPresentationId);
  targetPresentation.insertSlide(0, newSlide);
}