// Purpose: search old agendas for action items to be completed
// Done: combined Table Pull and Phrase Pull action tracking. One tab for each pull in the same workbook.
// Done: exclude rows with empty tasks
// Done: maintains workbook conditional formatting, workbook formatting, and header row filters
// Done: exclude rows with empty tasks
// Done: maintains conditional formatting, workbook formatting, and header row filters
// Done: Add menu button for Action Item retrieval
// Future development: preserve links in task items from the source documents//combined Table Pull and Phrase Pull action tracking. One tab for each pull in the same workbook.

function onOpen() {
  SpreadsheetApp.getUi() // Use SpreadsheetApp for Google Sheets.
      .createMenu('Action Items')
      .addItem('Get Actions','importActionsFromFolder')
      .addToUi();
}

function importActionsFromFolder() {
    var folderId = '1WKYw4jnP6ejRkOLAIPoPvbEYClaLE4eR';
    var folder = DriveApp.getFolderById(folderId);
    var files = folder.getFilesByType(MimeType.GOOGLE_DOCS);
  
    var spreadsheetId = '1uYgX660tpizNbIy44ddQogrRphfwZqn1D0Oa2RlSYKg';
    var spreadsheet = SpreadsheetApp.openById(spreadsheetId);
  
    var tablePullSheetName = 'Table Pull';
    var phrasePullSheetName = 'Phrase Pull';
  
    var tablePullSheet = spreadsheet.getSheetByName(tablePullSheetName);
    var phrasePullSheet = spreadsheet.getSheetByName(phrasePullSheetName);
  
    if (!tablePullSheet) {
  tablePullSheet = spreadsheet.insertSheet(tablePullSheetName);
} else {
  tablePullSheet.clearContents(); 
}

if (!phrasePullSheet) {
  phrasePullSheet = spreadsheet.insertSheet(phrasePullSheetName);
} else {
  phrasePullSheet.clearContents();
}

  
    var allData = [];
    var maxNumCols = 0;
  
    // Create a new files iterator
    var filesCopy = folder.getFilesByType(MimeType.GOOGLE_DOCS);
  
    while (filesCopy.hasNext()) {
      var file = filesCopy.next();
      var docId = file.getId();
      var doc = DocumentApp.openById(docId);
      var tables = doc.getBody().getTables();
      var secondTable = findSecondTable(tables);
  
      if (secondTable) {
        var tableData = tableTo2DArray(secondTable);
  
        if (tableData.length > 0) {
          var documentName = file.getName();
          var documentLink = '=HYPERLINK("' + file.getUrl() + '", "' + documentName + '")';
          var modifiedTableData = tableData.map(function(row) {
            return [documentLink].concat(row); // Add hyperlinked document name as the first column
          });
  
          allData = allData.concat(modifiedTableData); // Use concat to combine arrays
          maxNumCols = Math.max(maxNumCols, modifiedTableData[0].length);
        }
      }
    }
  
    // Filter out rows containing "Task Owner" or "Owner" and blank tasks
    allData = allData.filter(function(row) {
      var rowString = row.join(' ').toLowerCase();
      var task = row[4]; // Assuming the task column is at index 4
      return (
        rowString.indexOf('task owner') === -1 &&
        rowString.indexOf('owner') === -1 &&
        task && task.trim() !== '' // Exclude rows with blank tasks (fifth column)
      );
    });
  
    // Add header row with additional columns
    var headerRow = ['Action Source', 'Status', 'Assigned to', 'Project', 'Task'].concat(Array.from({length: maxNumCols - 5}, function() { return ''; }));
    allData.unshift(headerRow);
  


// Write the data to the table pull sheet
var tablePullRange = tablePullSheet.getRange(1, 1, allData.length, maxNumCols);
tablePullRange.setValues(allData);

tablePullSheet.getRange(1, 1, 1, maxNumCols);
  
// Create a new files iterator
    var filesCopy2 = folder.getFilesByType(MimeType.GOOGLE_DOCS);
  
    var allActions = getActionsFromFiles(filesCopy2);
  
// Write the data to the phrase pull sheet
    writeDataToSheet(phrasePullSheet, allActions);
  }
  
  function findSecondTable(tables) {
    if (tables.length >= 2) {
      for (var i = 1; i < tables.length; i++) {
        var table = tables[i];
        var numCols = table.getRow(0).getNumCells();
        if (numCols > 2) {
          return table;
        }
      }
    }
  
    return null;
  }
  
  function tableTo2DArray(table) {
    var numRows = table.getNumRows();
    var numCols = table.getRow(0).getNumCells();
    var data = [];
  
    for (var i = 0; i < numRows; i++) {
      var rowData = [];
      for (var j = 0; j < numCols; j++) {
        var cellValue = table.getCell(i, j).getText();
        rowData.push(cellValue);
      }
      data.push(rowData);
    }
  
    return data;
  }
  
  function getActionsFromFiles(files) {
    var allActions = [];
  
    while (files.hasNext()) {
      var file = files.next();
      var docId = file.getId();
      var doc = DocumentApp.openById(docId);
      var paragraphs = doc.getBody().getParagraphs();
      var actions = findAction(paragraphs);
  
      if (actions.length > 0) {
        var documentName = file.getName();
        var documentLink = '=HYPERLINK("' + file.getUrl() + '", "' + documentName + '")';
  
        actions.forEach(function(action) {
          var actionData = [documentLink, action];
          allActions.push(actionData);
        });
      }
    }
  
    var headerRow = ['Document', 'Action'];
    allActions.unshift(headerRow);
  
    return allActions;
  }
  
  function writeDataToSheet(sheet, data) {
    if (data.length > 0) {
      var range = sheet.getRange(1, 1, data.length, data[0].length);
      range.setValues(data);
    }
  }
  
  function findAction(paragraphs) {
    var actionPhrases = [/^action\s*:\s*/i, /^action\s*-\s*/i]; // i modifier for case-insensitive matching, \s* to match any number of spaces
    var actions = [];
  
    for (var i = 0; i < paragraphs.length; i++) {
      var paragraph = paragraphs[i];
      var text = paragraph.getText().trim();
  
      for (var j = 0; j < actionPhrases.length; j++) {
        var match = text.match(actionPhrases[j]);
  
        if (match) {
          var action = text.substring(match[0].length).trim();
          actions.push(action);
        }
      }
    }
  
    return actions;
  }
  
  